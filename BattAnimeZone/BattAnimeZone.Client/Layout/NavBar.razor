@using BattAnimeZone.Client.Authentication
@using BattAnimeZone.Client.Components
@using BlazorBootstrap;
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

<link rel="stylesheet" href="/NavBar.css?version=0.1" />

<RadzenRow Style="border:solid 1px black; border-radius:8px; height: 50px; width:100%; padding:7px; margin-bottom:20px;">
<div class="navbar-row" style="border-radius: 5px;  ;height: 100%; padding: 6px; width: 100%; background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd)">
    <div class="left-items"> 
        <RadzenColumn class="navbar-column" Style="min-width: 170px; max-width: 20vh; " @onclick="NavigateToIndex">BattAnimeZone!!</RadzenColumn>
        <RadzenColumn class="navbar-column" Style="min-width: 10vh; max-width: 10vh;" @onclick="NavigateToAnimes">ANIMES</RadzenColumn>
        <RadzenColumn class="navbar-column" Style="min-width: 10vh; max-width: 10vh;" @onclick="NavigateToGenres">GENRES</RadzenColumn>
        <RadzenColumn class="navbar-column" Style="min-width: 10vh; max-width: 10vh;" @onclick="NavigateToStudios">STUDIOS</RadzenColumn>
        
       
    </div>
    <div class="right-items">
            <RadzenColumn class="navbar-column-right" Style="min-width: 10vh; max-width: 10vh; font-weight: 600;" @onclick="ShowOffCanvasAbout">ABOUT</RadzenColumn>
            <AuthorizeView Roles="Administrator, User">
                <Authorized>
                    <div class="navbar-column-right" Style="min-width: 10vh; max-width: 10vh;font-weight: 600;" @onclick="ShowOffCanvasAuth">
                        @userName.ToUpper()
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="navbar-column-right" Style="min-width: 10vh; max-width: 10vh; font-weight: 600;" @onclick="ShowOffCanvasNotAuth">LOGIN/REGISTER</div>
                </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
</RadzenRow>

<AuthorizeView Roles="Administrator, User">
    <Authorized>
        <Offcanvas @ref="offcanvasAuthorized" Class="offcanvas"> </Offcanvas>
    </Authorized>
    <NotAuthorized>
        <Offcanvas @ref="offcanvasNotAuthorized" Class="offcanvas"> </Offcanvas>
    </NotAuthorized>
</AuthorizeView>
<Offcanvas @ref="offcanvasAbout" Class="offcanvas"> </Offcanvas>




@code {

    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    private Offcanvas offcanvasNotAuthorized = default!;
    private Offcanvas offcanvasAuthorized = default!;
    private Offcanvas offcanvasAbout = default!;


    string? userName = "";


    protected override async Task OnInitializedAsync()
    {
        await GetUserName();
        await base.OnInitializedAsync();
    }


    public async Task GetUserName()
    {
        try
        {
            if (authenticationState == null) return;
            var authState = await authenticationState;
            var user = authState.User;
            if (user.Identity.Name != null)
            userName = user.Identity.Name.ToString();
        }catch(Exception e)
        {
            return;
        }
    }

    private async Task ShowOffCanvasNotAuth()
    {
       
        await offcanvasNotAuthorized.ShowAsync<LoginRegisterComponent>(title: "");
    }

    private async Task ShowOffCanvasAuth()
    {

        await offcanvasAuthorized.ShowAsync<LoggedInComponent>(title: userName);
    }


    private async Task ShowOffCanvasAbout()
    {

        await offcanvasAbout.ShowAsync<AboutComponent>(title: "About");
    }

    public void NavigateToIndex()
    {
        navManager.NavigateTo($"/");
    }

    public void NavigateToAnimes()
    {
        navManager.NavigateTo($"/animelist");
    }

    public void NavigateToGenres()
    {
        navManager.NavigateTo($"/genrelist");
    }

    public void NavigateToStudios()
    {
        navManager.NavigateTo($"/studiolist");
    }

}
