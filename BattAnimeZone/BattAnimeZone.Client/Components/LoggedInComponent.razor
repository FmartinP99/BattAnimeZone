@using BattAnimeZone.Shared.Models.User
@using BattAnimeZone.Client.Authentication
@using BattAnimeZone.Shared.Models.User.BrowserStorageModels
@using System.Net
@using System.Net.Http.Headers;
@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authStateProvider
<link rel="stylesheet" href="/LoggedInComponent.css" />


<RadzenColumn class="logOutButton" Style="min-width: 10vh; max-width: 10vh;" @onclick="Logout">LOGOUT!</RadzenColumn>

@code {



    HttpClient httpClient;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
        }
    }
    public async Task Logout()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to logout?");
        if (confirmed)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            UserSession userSession = await customAuthStateProvider.GetUserSession();

            try
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userSession.Token);
                await httpClient.PostAsJsonAsync<UserSession>($"{navManager.BaseUri}api/AccountController/Logout", userSession);
            }catch {}
            finally
            {
               await customAuthStateProvider.UpdateAuthenticationState(null);
               navManager.NavigateTo(navManager.Uri, forceLoad: true);
            }


            
        }
    }
}
