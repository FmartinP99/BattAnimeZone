@using BattAnimeZone.Shared.Models.User
@using BattAnimeZone.Client.Authentication
@using BattAnimeZone.Client.Services
@using BattAnimeZone.Shared.Models.User.BrowserStorageModels
@using System.Net
@using System.Net.Http.Headers;
@using BlazorBootstrap;
@using System.Security.Claims;
@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject StorageService storageService
@inject AuthenticationStateProvider authStateProvider
<link rel="stylesheet" href="/LoggedInComponent.css?version=0.1" />

<div class="content">

    <div class="profileDiv">
        <Button Color="ButtonColor.None" @onclick="NavigateToProfile"><Icon Name="IconName.Person" Size=IconSize.x3 /> <span> @userName</span> </Button>
    </div>

    <div class="changeDetailsDiv">
        <Button Color="ButtonColor.None" @onclick="ShowOffCanvasChangeDetails"><Icon Name="IconName.TicketDetailed" /> <span>Change Details!</span></Button>
    </div>


    <div class="logoutDiv">
    <Button Color="ButtonColor.None" @onclick="Logout"><Icon Name="IconName.BoxArrowLeft" /> <span>LOGOUT!</span></Button>
    </div>

    <div class="deleteAccountDiv">
        <Button Color="ButtonColor.None" @onclick="OnShowModalClick"><Icon Name="IconName.PersonDash" /> <span>DELETE MY ACCOUNT!</span></Button>
    </div>

</div>



<Modal title="Confirm Account Deletion" onfocus="true" @ref="modal" Class="customModalCssClass" IsVerticallyCentered="true"
       FooterCssClass="customModalFooterCssClass"
       BodyCssClass="customModalBodyCssClass"
       HeaderCssClass="customModalHeaderCssClass"
       CloseIconColor=IconColor.White>

    <BodyTemplate>
      
        <RadzenLabel Text="Current password:" class="rateComponentText" Style="vertical-align: middle;" />
        <input type="password" class="inputClass" @bind=@confirmpassword Style="width: 100%; max-width: 160px;" Name="DropDownTextValueProperties" />
       
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick" Style="background-color: green;">Close</Button>
        <Button Color="ButtonColor.Primary" @ref="modalSaveButton" @onclick="OnModalSaveClick" Style="background-color: #8B0000;">DELETE MY ACCOUNT!</Button>
    </FooterTemplate>
</Modal>




<Offcanvas @ref="offcanvasChanngeDetails" Class="offcanvas" Placement=Placement.Start> </Offcanvas>

@code {

    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    HttpClient httpClient;

    string? userName = "";

    private Offcanvas offcanvasChanngeDetails = default!;

    Modal modal = default!;
    private Button modalSaveButton = default!;

    string confirmpassword = "";

    protected override async Task OnInitializedAsync()
    {
        await GetUserName();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
        }
    }

    public async Task GetUserName()
    {
        try
        {
            if (authenticationState == null) return;
            var authState = await authenticationState;
            var user = authState.User;
            if (user.Identity.Name != null)
                userName = user.Identity.Name.ToString();

        }
        catch (Exception e)
        {
            return;
        }
    }

    public async Task Logout()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to logout?");
        if (confirmed)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            UserSession userSession = await storageService.GetUserSession();

            try
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userSession.Token);
                await httpClient.PostAsJsonAsync<UserSession>($"{navManager.BaseUri}api/AccountController/Logout", userSession);
                httpClient.DefaultRequestHeaders.Authorization = null;

            }catch {}
            finally
            {
                await customAuthStateProvider.UpdateAuthenticationState(null);
                navManager.NavigateTo(navManager.Uri, forceLoad: true);
            }

        }
    }


    private async Task ShowOffCanvasChangeDetails()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("UserName", userName ?? "");
        await offcanvasChanngeDetails.ShowAsync<ChangeDetailsComponent>(title: "Change Details", parameters: parameters);
    }

    private async Task OnShowModalClick()
    {


        await modal.ShowAsync();

    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task OnModalSaveClick()
    {

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        UserSession userSession = await storageService.GetUserSession();

        DeleteAccountRequest deleteAccountRequest = new DeleteAccountRequest
            {
                UserName = userName,
                Password = confirmpassword
            };

        try
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userSession.Token);
            var response = await httpClient.PostAsJsonAsync<DeleteAccountRequest>($"{navManager.BaseUri}api/AccountController/DeleteAccount", deleteAccountRequest);
            httpClient.DefaultRequestHeaders.Authorization = null;

            DeleteAccountResponse? content = await response.Content.ReadFromJsonAsync<DeleteAccountResponse>();

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", content?.Message);

                await customAuthStateProvider.UpdateAuthenticationState(null);
                navManager.NavigateTo(navManager.Uri, forceLoad: true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", content?.Message);
                if (content.Message != "The password is incorrect!")
                {
                    await customAuthStateProvider.UpdateAuthenticationState(null);
                    navManager.NavigateTo(navManager.Uri, forceLoad: true);
                }

            }
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Something went wrong with the account deletion. You will be logged out now! Log in, and try again!");
        }
    }



    public void NavigateToProfile()
    {
        navManager.NavigateTo($"/profile/{userName}");
    }
}
