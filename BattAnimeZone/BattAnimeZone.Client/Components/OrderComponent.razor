@using BattAnimeZone.Shared.Models.AnimeDTOs
@typeparam T where T : class, IAnimeDTO

<RadzenLabel Text="Order by:" class="orderComponentText" Component="DropDownTextValueProperties" Style="margin-right: 8px; vertical-align: middle;" />
<RadzenDropDown Change="onChanged" class="rzdropdown" @bind-Value=@filter_str Data=@filter_bys Style="width: 100%; max-width: 400px;" Name="DropDownTextValueProperties" />



@code{

    string filter_str = "Score Descending";
    IEnumerable<string> filter_bys = new List<string>() {"Alphabetical Title", "Alphabetical Title Descending" ,"Alphabetical ENG Title", "Alphabetical Descending ENG Title",  "Alphabetical JP Title", "Alphabetical Descending JP Title",
    "Year", "Year Descending", "Episodes", "Episodes Descending",
    "Score", "Score Descending", "Popularity", "Popularity Descending", "Type", "Type Descending" };

    [Parameter]
    public List<T> animes { get; set; }
    [Parameter]
    public EventCallback<List<T>> AnimesChanged { get; set; }

    protected async void onChanged()
    {
      
        switch (filter_str)
        {
            case "Alphabetical Title":
                animes = animes = animes.OrderBy(anime => anime.Title)
                .ToList();
                break;
            case "Alphabetical Title Descending":
                animes = animes.OrderByDescending(anime => anime.Title)
               .ToList();
                break;
            case "Alphabetical ENG Title":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.TitleEnglish) && string.IsNullOrEmpty(anime.TitleJapanese) ? 2 :
                string.IsNullOrEmpty(anime.TitleEnglish) ? 1 : 0)
                .ThenBy(anime => anime.TitleEnglish)
                .ToList();
                break;
            case "Alphabetical Descending ENG Title":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.TitleEnglish) && string.IsNullOrEmpty(anime.TitleJapanese) ? 2 :
               string.IsNullOrEmpty(anime.TitleEnglish) ? 1 : 0)
               .ThenByDescending(anime => anime.TitleEnglish)
               .ToList();
                break;
            case "Alphabetical JP Title":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.TitleEnglish) && string.IsNullOrEmpty(anime.TitleJapanese) ? 2 :
                string.IsNullOrEmpty(anime.TitleJapanese) ? 1 : 0)
               .ThenBy(anime => anime.TitleJapanese)
               .ToList();
                break;
            case "Alphabetical Descending JP Title":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.TitleEnglish) && string.IsNullOrEmpty(anime.TitleJapanese) ? 2 :
                string.IsNullOrEmpty(anime.TitleJapanese) ? 1 : 0)
               .ThenByDescending(anime => anime.TitleJapanese)
               .ToList();
                break;
            case "Year":
                animes = animes.OrderBy(anime => anime.Year == 0.0)
                .ThenBy(anime => anime.Year).ToList();
                break;
            case "Year Descending":
                animes = animes.OrderBy(anime => anime.Year == 0.0)
                .ThenByDescending(anime => anime.Year).ToList();
                break;
            case "Episodes":
                animes = animes.OrderBy(anime => anime.Episodes == 0.0)
                .ThenBy(anime => anime.Episodes).ToList();
                break;
            case "Episodes Descending":
                animes = animes.OrderBy(anime => anime.Episodes == 0.0)
                .ThenByDescending(anime => anime.Episodes).ToList();
                break;
            case "Score":
                animes = animes.OrderBy(anime => anime.Score == 0.0)
                .ThenBy(anime => anime.Score).ToList();
                break;
            case "Score Descending":
                animes = animes.OrderBy(anime => anime.Score == 0.0)
                .ThenByDescending(anime => anime.Score).ToList();
                break;
            case "Popularity":
                animes = animes.OrderBy(anime => anime.Popularity == 0.0)
                .ThenBy(anime => anime.Popularity).ToList();
                break;
            case "Popularity Descending":
                animes = animes.OrderBy(anime => anime.Popularity == 0.0)
                .ThenByDescending(anime => anime.Popularity).ToList();
                break;
            case "Type":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.MediaType))
                .ThenBy(anime => anime.MediaType).ToList();
                break;
            case "Type Descending":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.MediaType))
                .ThenByDescending(anime => anime.MediaType).ToList();
                break;
            default:
                break;
        }
        await AnimesChanged.InvokeAsync(animes);
    }
}