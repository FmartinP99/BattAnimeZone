@using BattAnimeZone.Shared.Models.Genre
@using BattAnimeZone.Shared.Models.GenreDTOs
@using BattAnimeZone.Shared.Models.Anime
@using BattAnimeZone.Shared.Models.AnimeDTOs
@using BattAnimeZone.Client.Components
@using BattAnimeZone.Client.Authentication
@using BattAnimeZone.Client.Services
@inject AuthenticationStateProvider authStateProvider
@inject StorageService storageService
@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
<link rel="stylesheet" href="/ListAnime.css?version=0.2" />
@page "/animelist"

<PageTitle>List animes</PageTitle>

<SearchBar></SearchBar>

@if(!loaded){
    <LoadingComponent></LoadingComponent>
}
else{
    <RadzenStack class="rz-p-0 rz-p-md-12">

        <RadzenCard Style="background:transparent;">
            <RadzenPickList @bind-Source="@SourceGenres" @bind-Target="@TargetGenres" Style="height:300px; width:100%; background:transparent;" Orientation="@orientation"
                            TextProperty="@nameof(AnimeGenreDTO.Name)" AllowFiltering="@allowFilter" Multiple="@multiple" ShowHeader="@showHeader"
                            ButtonGap="@gap" ButtonJustifyContent="@justifyContent" ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade" ButtonVariant="@variant">
                <SourceHeader>
                    Genres:
                </SourceHeader>
                <TargetHeader>
                    Selected Genres:
                </TargetHeader>
                <Template>
                    @context.Name
                </Template>
            </RadzenPickList>
        </RadzenCard>

        <div class="outer-row">
             <div class="left-items">
                 <div class="column-left">
                    <RadzenLabel class="labeltext" Text="From: "/>
                    <RadzenNumeric class="numericClass" Min="@available_years.Min()" Max="@available_years.Max()" @bind-Value=@lower_limit InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                </div>
                <div class="column-left">
                    <RadzenLabel class="labeltext"  Text="To: " />
                    <RadzenNumeric class="numericClass"  Min="@lower_limit" Max="@available_years.Max()" @bind-Value=@upper_limit InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                </div>
            </div>
  
  
            <div class="right-items">
                <div class="column-right">
                    <RadzenLabel  Component="DropDownMultipleChips" />
                    <RadzenSelectBar class="selectbarButton mb-5" Multiple="true" Data="@media_types" @bind-Value=@selected_medias TValue="IEnumerable<string>" TextProperty="Name" ValueProperty="Id" />
                </div>
            </div>
        </div>
      

      

       

        <RadzenButton Click="Search" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd)">FILTER ANIMES</RadzenButton>
    </RadzenStack>

    @if (searching)
    {
        <LoadingComponent></LoadingComponent>
    }else{
        @if (searched_animes.Count > 0)
        {
            <RadzenColumn class="rz-text-align-end orderByCol">
            <OrderComponent T="LiAnimeDTO" animes="searched_animes" AnimesChanged="OnAnimesChanged"></OrderComponent>
            </RadzenColumn>

            <RadzenPager @ref=pager class="radzenPagerClass" PagingSummaryFormat="@pagingSummaryFormat" ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Left" PageNumbersCount=@pagenumcount PageSize=@pageSize Count="count" PageChanged="@PageChanged" />


            @foreach (LiAnimeDTO anime in animes_per_page)
            {
                <div @onclick=@(() => NavigateTo(anime.Mal_id)) class="animeRow">
                    <RadzenColumn Style="min-width:100px; max-width:100px; display:inline-block;">
                        <RadzenImage Style="max-width:100px; max-height:100px;" Path="@anime.ImageLargeWebpUrl"></RadzenImage>
                    </RadzenColumn>

                    <div class="attributeTitleDiv">
                        Title: <br> @anime.Title
                    </div>

                    <div class="attributeTitleDiv">
                        English Title: <br> @anime.TitleEnglish
                    </div>

                    <div class="attributeTitleDiv">
                        Japanese Title: <br> @anime.TitleJapanese
                    </div>

                    <div class="attributeDiv">
                        Type: <br> @anime.MediaType
                    </div>

                    <div class="attributeDiv">
                        Episodes: <br> @anime.Episodes
                    </div>

                    <div class="attributeDiv">
                        Score: <br> @anime.Score
                    </div>

                    <div class="attributeDiv">
                        Popularity: <br> @anime.Popularity
                    </div>

                    <div class="attributeDiv">
                        Year: <br> @anime.Year
                    </div>

                    <div class="attributeDiv">
                        Status: <br> @anime.Status
                    </div>

                </div>
            }

            <RadzenPager @ref=pager2 Style="overflow-x: clip; max-width: 75vw;" PagingSummaryFormat="@pagingSummaryFormat" ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Left" PageNumbersCount=@pagenumcount PageSize=@pageSize Count="count" PageChanged="@PageChanged" />
        }
        else if (firstsearch)
        {
            <h1>There are no animes with the given search terms!</h1>
        }
    }
}


@code {

    HttpClient httpClient;

    CustomAuthenticationStateProvider customAuthStateProvider; 

    bool loaded = false;
    bool searching = false;
    bool firstsearch = false;

    Dictionary<int, int>? animeCountPerGenre = new Dictionary<int, int>();

    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;

    string gap = "12px";
    bool allowFilter = true;
    bool multiple = true;
    bool showHeader = true;





    List<AnimeGenreDTO>? genres;
    List<LiAnimeDTO> searched_animes = new List<LiAnimeDTO>();

    List<string>? media_types;

    IEnumerable<string> selected_medias = new List<string>();
    IEnumerable<string> selected_medias2;

    List<int> available_years = new List<int>();
    List<int> available_years_upper_limit = new List<int>();
    int? lower_limit = 0;
    int? upper_limit = 9999;


    IEnumerable<LiAnimeDTO> animes_per_page = new List<LiAnimeDTO>();
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 7;
    int count;
    int pageNumber;
    int pagenumcount = 20;
    int last_skip = 0;

    RadzenPager? pager;
    RadzenPager? pager2;


    IEnumerable<AnimeGenreDTO> _sourceGenres = new List<AnimeGenreDTO>();
    IEnumerable<AnimeGenreDTO> SourceGenres
    {
        get
        {
            return _sourceGenres;
        }
        set
        {
            if (value != null)
            {
                _sourceGenres = value;
            }
            else
            {
                _sourceGenres = new List<AnimeGenreDTO>();
            }
        }
    }

    IEnumerable<AnimeGenreDTO> _targetGenres = new List<AnimeGenreDTO>();
    IEnumerable<AnimeGenreDTO> TargetGenres
    {
        get
        {
            return _targetGenres;
        }
        set
        {
            if (value != null)
            {
                _targetGenres = value;
            }
            else
            {
                _targetGenres = new List<AnimeGenreDTO>();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
            loaded = true;

            bool success = await LoadRequestsAsync(); //sets media_types,  animeCountPerGenre, genres
            if (!success) return;
            lower_limit = available_years.Min();
            upper_limit = available_years.Max();

            SourceGenres = genres;

            SourceGenres = SourceGenres
                .OrderByDescending(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) ? animeCountPerGenre[genre.Mal_id] : 0)
                .Where(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) && animeCountPerGenre[genre.Mal_id] != 0)
                .ToList();

            StateHasChanged();
        }
    }


    private async Task<bool> LoadRequestsAsync()
    {

        bool found_error = false;

        media_types = await storageService.GetFromSessionStorage<List<string>?>("media_types");

        if (media_types == null)
        {
            try
            {
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetMediaTypes");

                if (response.IsSuccessStatusCode)
                {
                    media_types = await response.Content.ReadFromJsonAsync<List<string>>();
                    await storageService.SaveToSessionStorage("media_types", media_types);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                    found_error = true;
                }
            }
            catch (Exception ex)
            {
                found_error = true;
                await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}"); ;
            }
        }


        animeCountPerGenre = await storageService.GetFromSessionStorage<Dictionary<int, int>?>("anime_counts_per_genre");

        if (animeCountPerGenre == null)
        {
            try
            {
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetAnimesPerGenreIdCount");

                if (response.IsSuccessStatusCode)
                {
                    animeCountPerGenre = await response.Content.ReadFromJsonAsync<Dictionary<int, int>>();
                    await storageService.SaveToSessionStorage("anime_counts_per_genre", animeCountPerGenre);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                    found_error = true;
                }
            }
            catch (Exception ex)
            {
                found_error = true;
                await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}"); ;
            }
        }

        genres = await storageService.GetFromSessionStorage<List<AnimeGenreDTO>?>("genres");

        if (genres == null)
        {
            try
            {
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetGenres");

                if (response.IsSuccessStatusCode)
                {
                    genres = await response.Content.ReadFromJsonAsync<List<AnimeGenreDTO>>();
                    await storageService.SaveToSessionStorage("genres", genres);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                    found_error = true;
                }
            }
            catch (Exception ex)
            {
                found_error = true;
                await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}"); ;
            }
        }


        available_years = await storageService.GetFromSessionStorage<List<int>?>("years");
        if (available_years == null)
        {

            try
            {
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetYears");
                if (response.IsSuccessStatusCode)
                {
                    available_years = await response.Content.ReadFromJsonAsync<List<int>>();
                    await storageService.SaveToSessionStorage("years", available_years);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                }
            }
            catch (Exception e)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
            }
        }



        return !found_error;
    }

    protected async Task Search()
    {
        searching = true;
        firstsearch = true;
        try
        {
            string genreQuery = TargetGenres.Select(g => g).Count() > 0 ? string.Join("&", TargetGenres.Select(g => $"genres={Uri.EscapeDataString(g.Mal_id.ToString())}")) : "";
            string mediaTypeQuery = selected_medias.ToList().Count > 0 ? string.Join("&", selected_medias.Select(m => $"mediaTypes={Uri.EscapeDataString(m)}")) : "";

            string fullQuery = string.Join("&", new[] { genreQuery, mediaTypeQuery }.Where(q => !string.IsNullOrWhiteSpace(q)));

            fullQuery = fullQuery +  $"&yearlower={lower_limit}&yearupper={upper_limit}";

            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetFilteredAnimes?{fullQuery}");


            if (response.IsSuccessStatusCode)
            {
                searched_animes = await response.Content.ReadFromJsonAsync<List<LiAnimeDTO>>();

                searched_animes = searched_animes.OrderByDescending(anim => anim.Score).ToList();
                animes_per_page = searched_animes.Take(pageSize);
                count = searched_animes.Count;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
            }
        }
        catch(Exception e)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
        }

        searching = false;
    }


    void PageChanged(PagerEventArgs args)
    {
        animes_per_page = searched_animes.Skip(args.Skip).Take(args.Top);
        last_skip = args.Skip;
        pager.GoToPage(args.PageIndex);
        pager2.GoToPage(args.PageIndex);
    }

    private void OnAnimesChanged(List<LiAnimeDTO> updatedAnimes)
    {
        searched_animes = updatedAnimes;
        animes_per_page = searched_animes.Skip(last_skip).Take(pageSize);
        StateHasChanged(); 
    }

    protected async void NavigateTo(int mal_id)
    {
        navManager.NavigateTo($"/anime/{mal_id}");
    }

}
