@using BattAnimeZone.Shared.Models.Genre
@using BattAnimeZone.Shared.Models.GenreDTOs
@using BattAnimeZone.Shared.Models.Anime
@using BattAnimeZone.Shared.Models.AnimeDTOs
@using BattAnimeZone.Client.Components
@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
<link rel="stylesheet" href="/ListAnime.css" />
@page "/animelist"

<SearchBar></SearchBar>

@if(!loaded){
    <LoadingComponent></LoadingComponent>
}
else{
    <RadzenStack class="rz-p-0 rz-p-md-12">

        <RadzenCard Style="background:transparent;">
            <RadzenPickList @bind-Source="@SourceGenres" @bind-Target="@TargetGenres" Style="height:300px; width:100%; background:transparent;" Orientation="@orientation"
                            TextProperty="@nameof(AnimeGenreDTO.Name)" AllowFiltering="@allowFilter" Multiple="@multiple" ShowHeader="@showHeader"
                            ButtonGap="@gap" ButtonJustifyContent="@justifyContent" ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade" ButtonVariant="@variant">
                <SourceHeader>
                    Genres:
                </SourceHeader>
                <TargetHeader>
                    Selected Genres:
                </TargetHeader>
                <Template>
                    @context.Name
                </Template>
            </RadzenPickList>
        </RadzenCard>

  
            <RadzenColumn class="rz-text-align-end">
            <RadzenLabel Component="DropDownMultipleChips" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown class="rzdropdown" @bind-Value=@selected_medias Data=@media_types Name="DropDownMultipleChips"
                            Multiple=true AllowClear=true Placeholder="Select Media Types (OR search)" Chips=true Style="width: 100%; max-width: 400px;" />
            </RadzenColumn>

        <RadzenButton Click="Search" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd); margin-top:30px;">FILTER ANIMES</RadzenButton>
    </RadzenStack>

    @if (searching)
    {
        <LoadingComponent></LoadingComponent>
    }else{
        @if (searched_animes.Count > 0)
        {
            <RadzenColumn class="rz-text-align-end">
            <OrderComponent T="LiAnimeDTO" animes="searched_animes" AnimesChanged="OnAnimesChanged"></OrderComponent>
            </RadzenColumn>

        <RadzenPager @ref=pager Style="overflow-x: clip; max-width: 75vw;" PagingSummaryFormat="@pagingSummaryFormat" ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Left" PageNumbersCount=@pagenumcount PageSize=@pageSize Count="count" PageChanged="@PageChanged" />


            @foreach (LiAnimeDTO anime in animes_per_page)
            {
                <RadzenRow @onclick=@(() => NavigateTo(anime.Mal_id)) Style="height:100px; margin-bottom: 30px;">
                    <RadzenColumn Style="max-width:100px; ">
                        <RadzenImage Style="max-width:100px; max-height:100px;" Path="@anime.ImageLargeWebpUrl"></RadzenImage>
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:200px;">
                        English Name: <br> @anime.TitleEnglish
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:200px;">
                        Japanese name: <br> @anime.TitleJapanese
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:100px;">
                        Type: <br> @anime.MediaType
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:100px;">
                        Episodes: <br> @anime.Episodes
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:100px;">
                        Score: <br> @anime.Score
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:100px;">
                        Popularity: <br> @anime.Popularity
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:100px;">
                        Year: <br> @anime.Year
                    </RadzenColumn>
                    <RadzenColumn Style="max-width:100px;">
                        Status: <br> @anime.Status
                    </RadzenColumn>
                </RadzenRow>
            }

            <RadzenPager @ref=pager2 Style="overflow-x: clip; max-width: 75vw;" PagingSummaryFormat="@pagingSummaryFormat" ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Left" PageNumbersCount=@pagenumcount PageSize=@pageSize Count="count" PageChanged="@PageChanged" />
        }
        else if (firstsearch)
        {
            <h1>There are no animes with the given search terms!</h1>
        }
    }
}


@code {

    HttpClient httpClient;

    bool loaded = false;
    bool searching = false;
    bool firstsearch = false;

    Dictionary<int, int>? animeCountPerGenre = new Dictionary<int, int>();

    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;

    string gap = "12px";
    bool allowFilter = true;
    bool multiple = true;
    bool showHeader = true;

    IEnumerable<AnimeGenreDTO> _sourceGenres = new List<AnimeGenreDTO>();
    IEnumerable<AnimeGenreDTO> SourceGenres
    {
        get
        {
            return _sourceGenres;
        }
        set
        {
            if (value != null)
            {
                _sourceGenres = value;
            }
            else
            {
                _sourceGenres = new List<AnimeGenreDTO>();
            }
        }
    }

    IEnumerable<AnimeGenreDTO> _targetGenres = new List<AnimeGenreDTO>();
    IEnumerable<AnimeGenreDTO> TargetGenres
    {
        get
        {
            return _targetGenres;
        }
        set
        {
            if (value != null)
            {
                _targetGenres = value;
            }
            else
            {
                _targetGenres = new List<AnimeGenreDTO>();
            }
        }
    }



    List<AnimeGenreDTO>? genres;
    List<LiAnimeDTO> searched_animes = new List<LiAnimeDTO>();

    List<string>? media_types;

    List<string> selected_medias = new List<string>();


    IEnumerable<LiAnimeDTO> animes_per_page = new List<LiAnimeDTO>();
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 10;
    int count;
    int pageNumber;
    int pagenumcount = 15;
    int last_skip = 0;

    RadzenPager pager;
    RadzenPager pager2;

    protected override async Task OnInitializedAsync()
    {


        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
            loaded = true;

            bool success = await LoadRequestsAsync(); //sets media_types,  animeCountPerGenre, genres
            if (!success) return;
            SourceGenres = genres;

            SourceGenres = SourceGenres
                .OrderByDescending(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) ? animeCountPerGenre[genre.Mal_id] : 0)
                .Where(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) && animeCountPerGenre[genre.Mal_id] != 0)
                .ToList();

            StateHasChanged();
        }
    }


    private async Task<bool> LoadRequestsAsync()
    {

        bool found_error = false;

        try
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetMediaTypes");

            if (response.IsSuccessStatusCode)
            {
                media_types = await response.Content.ReadFromJsonAsync<List<string>>();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                found_error = true;
            }
        }
        catch (Exception ex)
        {
            found_error = true;
            await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}"); ;
        }

        try
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetAnimesPerGenreIdCount");

            if (response.IsSuccessStatusCode)
            {
                animeCountPerGenre = await response.Content.ReadFromJsonAsync<Dictionary<int, int>>();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                found_error = true;
            }
        }
        catch (Exception ex)
        {
            found_error = true;
            await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}"); ;
        }
       

        try
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetGenres");

            if (response.IsSuccessStatusCode)
            {
                genres = await response.Content.ReadFromJsonAsync<List<AnimeGenreDTO>>();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                found_error = true;
            }
        }
        catch (Exception ex)
        {
            found_error = true;
            await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}"); ;
        }

        return !found_error;
    }

    protected async Task Search()
    {
        searching = true;
        firstsearch = true;
        try
        {
   
            string genreQuery = TargetGenres.Select(g => g).Count() > 0 ? string.Join("&", TargetGenres.Select(g => $"genres={Uri.EscapeDataString(g.Mal_id.ToString())}")) : "";
            string mediaTypeQuery = selected_medias.Count > 0 ? string.Join("&", selected_medias.Select(m => $"mediaTypes={Uri.EscapeDataString(m)}")) : "";

            string fullQuery = string.Join("&", new[] { genreQuery, mediaTypeQuery }.Where(q => !string.IsNullOrWhiteSpace(q)));

            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetFilteredAnimes?{fullQuery}");


            if (response.IsSuccessStatusCode)
            {
                searched_animes = await response.Content.ReadFromJsonAsync<List<LiAnimeDTO>>();

                searched_animes = searched_animes.OrderByDescending(anim => anim.Score).ToList();
                animes_per_page = searched_animes.Take(pageSize);
                count = searched_animes.Count;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
            }
        }
        catch(Exception e)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
        }

        searching = false;
    }


    void PageChanged(PagerEventArgs args)
    {
        animes_per_page = searched_animes.Skip(args.Skip).Take(args.Top);
        last_skip = args.Skip;
        pager.GoToPage(args.PageIndex);
        pager2.GoToPage(args.PageIndex);
    }

    private void OnAnimesChanged(List<LiAnimeDTO> updatedAnimes)
    {
        searched_animes = updatedAnimes;
        animes_per_page = searched_animes.Skip(last_skip).Take(pageSize);
        StateHasChanged(); 
    }

    protected async void NavigateTo(int mal_id)
    {
        navManager.NavigateTo($"/anime/{mal_id}");
    }

}
