@using BattAnimeZone.Shared.Models.GenreDTOs
@using BattAnimeZone.Client.Components
@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@page "/genrelist"
<link rel="stylesheet" href="/ListGenre.css?version=0.1" />

<PageTitle>List genres</PageTitle>

<SearchBar></SearchBar>

@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}else{
     
        <RadzenRow class="genreListRow">
            @for (int i = 0; i < animeGenres.Count; i++)
            {
                var localindex = i;

            <RadzenColumn class="genreListColumn" @onclick="() => NavigateTo(animeGenres[localindex].Mal_id)">
                    <div class="textContainerDiv">
                    <p class="centered-text">@animeGenres[localindex].Name  </p>

                    <p class="centered-text">
                        ( @animeCountPerGenre[animeGenres[localindex].Mal_id] )
                    </p>
                    </div>
                </RadzenColumn>
                
            }
       
        </RadzenRow>
    }

@code {

    HttpClient httpClient;

    bool loaded = false;
    List<AnimeGenreDTO>? animeGenres;
    Dictionary<int, int>? animeCountPerGenre = new Dictionary<int, int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
            loaded = true;

            try
            {
                var angResponse = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetGenres");
                var tempGetAnimesPerGenreIdCountResponse = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetAnimesPerGenreIdCount");

                if (angResponse.IsSuccessStatusCode && tempGetAnimesPerGenreIdCountResponse.IsSuccessStatusCode)
                {
                    animeGenres = await angResponse.Content.ReadFromJsonAsync<List<AnimeGenreDTO>>();
                    animeCountPerGenre = await tempGetAnimesPerGenreIdCountResponse.Content.ReadFromJsonAsync<Dictionary<int, int>>();

                    animeGenres = animeGenres
                        .OrderByDescending(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) ? animeCountPerGenre[genre.Mal_id] : 0)
                        .Where(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) && animeCountPerGenre[genre.Mal_id] != 0)
                        .ToList();

                    StateHasChanged();
                }
                else
                {
                    if (!angResponse.IsSuccessStatusCode)
                    {
                        await JSRuntime.InvokeVoidAsync("console.error", $"{angResponse.StatusCode}\n {angResponse.ReasonPhrase}");
                        Console.WriteLine();
                    }
                    if (!tempGetAnimesPerGenreIdCountResponse.IsSuccessStatusCode)
                    {
                        await JSRuntime.InvokeVoidAsync("console.error", $"{tempGetAnimesPerGenreIdCountResponse.StatusCode}\n {tempGetAnimesPerGenreIdCountResponse.ReasonPhrase}");
                    }

                }
            }catch(Exception e)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
            }
        }
    }

        protected async void NavigateTo(int genreid)
    {

        navManager.NavigateTo($"/genrelist/{genreid}");
    }


}
