@using BattAnimeZone.Shared.Models.Genre
@using BattAnimeZone.Client.Components
@inject NavigationManager navManager
<link rel="stylesheet" href="/ListGenre.css" />
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@page "/genrelist"

<SearchBar></SearchBar>

@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}else{
    @for (int rowindex = 0; rowindex < (int)Math.Ceiling((double)animeGenres.Count / 4); rowindex++)
    {
        //must copy the variable due to how c# lambda functions work -> has access to a variable and not to the value of the variable.
        var localRow = rowindex;
        int item_index = localRow * 4;
        <RadzenRow class="genreListRow">
            @for (int colindex = 0; colindex < 4; colindex++)
            {
                    var localCol = colindex;
                @if (item_index + localCol < animeGenres.Count)
                {
            
                    <RadzenColumn class="genreListColumn" @onclick="() => NavigateTo(animeGenres[item_index + localCol].Mal_id)">
                        <div>
                        <p class="centered-text">@animeGenres[item_index + localCol].Name  </p>
                    
                        <p Style="font-size:25px;" class="centered-text">( @animeCountPerGenre[animeGenres[item_index + localCol].Mal_id] )
                        </p>
                        </div>
                    </RadzenColumn>
              
                }
            }
       
        </RadzenRow>
    }
}

@code {
    bool loaded = false;
    List<AnimeGenre> animeGenres;
    Dictionary<int, int> animeCountPerGenre = new Dictionary<int, int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loaded = true;

            try
            {
                var angResponse = await httpClient.GetAsync($"{navManager.BaseUri}api/AnimeService/GetGenres");
                var tempGetAnimesPerGenreIdCountResponse = await httpClient.GetAsync($"{navManager.BaseUri}api/AnimeService/GetAnimesPerGenreIdCount");

                if (angResponse.IsSuccessStatusCode && tempGetAnimesPerGenreIdCountResponse.IsSuccessStatusCode)
                {
                    var ang = await angResponse.Content.ReadFromJsonAsync<Dictionary<int, AnimeGenre>>();
                    animeCountPerGenre = await tempGetAnimesPerGenreIdCountResponse.Content.ReadFromJsonAsync<Dictionary<int, int>>();

                    animeGenres = ang.Values.ToList();

                    animeGenres = animeGenres
                        .OrderByDescending(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) ? animeCountPerGenre[genre.Mal_id] : 0)
                        .Where(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) && animeCountPerGenre[genre.Mal_id] != 0)
                        .ToList();

                    StateHasChanged();
                }
                else
                {
                    if (!angResponse.IsSuccessStatusCode)
                    {
                        await JSRuntime.InvokeVoidAsync("console.error", $"{angResponse.StatusCode}\n {angResponse.ReasonPhrase}");
                        Console.WriteLine();
                    }
                    if (!tempGetAnimesPerGenreIdCountResponse.IsSuccessStatusCode)
                    {
                        await JSRuntime.InvokeVoidAsync("console.error", $"{tempGetAnimesPerGenreIdCountResponse.StatusCode}\n {tempGetAnimesPerGenreIdCountResponse.ReasonPhrase}");
                    }

                }
            }catch(Exception e)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}"); ;
            }
        }
    }

        protected async void NavigateTo(int genreid)
    {

        navManager.NavigateTo($"/genrelist/{genreid}");
    }


}
