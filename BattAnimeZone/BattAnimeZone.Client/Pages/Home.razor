@using BattAnimeZone.Shared.Models.Genre
@using BattAnimeZone.Shared.Models.AnimeDTOs
@using BattAnimeZone.Client.Components
@using BlazorBootstrap;
@inject NavigationManager navManager
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@page "/"
<link rel="stylesheet" href="/Home.css?version=0.1" />
<PageTitle>Home</PageTitle>
<SearchBar></SearchBar>

@if (!loaded)
{
	<LoadingComponent></LoadingComponent>
}else{
	<div class="container-fluid">
		<h1 class="mt-5">Seasonal Animes</h1>

		<div class="headerDiv d-flex align-items-center">
			<p class="subtitle">@info_str</p>
			<div class="d-flex align-items-center headerInnerDiv">
				<div class="yearDiv">
				<RadzenLabel Text="YEAR:" class="orderComponentText rz-text-align-end" Component="DropDownTextValueProperties" Style="margin-right: 8px; vertical-align: middle;" />
				<RadzenDropDown Change="onChangedYear" class="rzdropdown" @bind-Value=@selected_year Data=@filter_by_year Style="width: 100%; max-width: 400px;" Name="DropDownTextValueProperties" />
				</div>
				<RadzenLabel Text="SEASON:" class="orderComponentText rz-text-align-end" Component="DropDownTextValueProperties" Style="margin-right: 8px; vertical-align: middle;" />
				<RadzenDropDown Change="onChangedSeason" class="rzdropdown" @bind-Value=@filter_str Data=@filter_by_season Style="width: 100%; max-width: 400px;" Name="DropDownTextValueProperties" />
			</div>
		</div>

		<div class="scrolling-wrapper row flex-row flex-nowrap mt-4 pb-4 pt-2">
			@if(this.currentlySelectedAnimes != null){
			@foreach (AnimeHomePageDTO anime in this.currentlySelectedAnimes)
			{
				<div class="col-2">
					<div class="card card-block card-1" @onclick="@(() => NavigateTo(anime.Mal_id))">
							<img src="@anime.ImageLargeWebpUrl" class="img-fluid" alt="Anime image is missing!">
							<div class="scoreDiv">@anime.Score</div>
							<div class="typeDiv">@anime.MediaType</div>
							<div class="titleDiv">@GetTitle(anime)</div>
							@if(anime.Status != "Finished Airing")
							{
							<div class="statusDiv">@anime.Status</div>
							}
					</div>
			</div>
			
			}
			}
		</div>
	</div>

}
@code{
	bool loaded = false;

	Dictionary<int, Dictionary<string, IEnumerable<AnimeHomePageDTO>>> animes_per_year = new Dictionary<int, Dictionary<string, IEnumerable<AnimeHomePageDTO>>>();
	IEnumerable<AnimeHomePageDTO>? winterAnimes;
	IEnumerable<AnimeHomePageDTO>? springAnimes;
	IEnumerable<AnimeHomePageDTO>? summerAnimes;
	IEnumerable<AnimeHomePageDTO>? fallAnimes;
	IEnumerable<AnimeHomePageDTO>? currentlySelectedAnimes;

	string filter_str = "WINTER";
	IEnumerable<string> filter_by_season = new List<string>() {"WINTER", "SPRING", "SUMMER", "FALL" };

	int selected_year = 2024;
	IEnumerable<int>? filter_by_year = new List<int>() {2023, 2024};

	string info_str = "2024 Winter Animes";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			loaded = true;
			try
			{
				var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetYears");
				if (response.IsSuccessStatusCode)
				{
					filter_by_year = await response.Content.ReadFromJsonAsync<List<int>>();
				}
				else
				{
					await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
					return;
				}
			}
			catch (Exception e)
			{
				await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
				return;
			}


			await queryAnimesByYear(2024);
			StateHasChanged();
		}
	}


	protected async Task queryAnimesByYear(int year)
	{
		try
		{

			//if the animes have been queried already
			if (animes_per_year.ContainsKey(year))
			{
				info_str = year + info_str.Substring(4);
				winterAnimes = animes_per_year[year]["winter"];
				springAnimes = animes_per_year[year]["spring"];
				summerAnimes = animes_per_year[year]["summer"];
				fallAnimes = animes_per_year[year]["fall"];
				currentlySelectedAnimes = winterAnimes ?? springAnimes ?? summerAnimes ?? fallAnimes;
				return;
			}


			var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetAnimesByYear/{year}");
			if (response.IsSuccessStatusCode)
			{
				IEnumerable<AnimeHomePageDTO>? animes = await response.Content.ReadFromJsonAsync<IEnumerable<AnimeHomePageDTO>>();
				if (animes == null) throw new ArgumentNullException($"ERROR: Queried anime year={year} was null");
				info_str = year + info_str.Substring(4);
				var seasonsDictionary = new Dictionary<string, IEnumerable<AnimeHomePageDTO>>
					{
						{ "winter", animes.Where(anime => anime.Season == "winter") },
						{ "spring", animes.Where(anime => anime.Season == "spring") },
						{ "summer", animes.Where(anime => anime.Season == "summer") },
						{ "fall", animes.Where(anime => anime.Season == "fall") }
					};
				animes_per_year.Add(year, seasonsDictionary);

				winterAnimes = animes_per_year[year]["winter"];
				springAnimes = animes_per_year[year]["spring"];
				summerAnimes = animes_per_year[year]["summer"];
				fallAnimes = animes_per_year[year]["fall"];
				currentlySelectedAnimes = winterAnimes ?? springAnimes ?? summerAnimes ?? fallAnimes;
			}
			else
			{
				await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
				return;
			}
		}
		catch (Exception e)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
			return;
		}
	}



	protected string GetTitle(AnimeHomePageDTO anime)
	{
		return anime.Title ?? anime.TitleEnglish ?? anime.TitleJapanese ?? "No Title Found!";
	} 


	protected async	Task onChangedSeason()
	{
		switch (filter_str)
		{
			case "WINTER":
				if (winterAnimes != null)
				{
					currentlySelectedAnimes = winterAnimes;
					info_str = $"{selected_year} Winter Animes";
				}
				break;
			case "SPRING":
				if (springAnimes != null)
				{
					currentlySelectedAnimes = springAnimes;
					info_str = $"{selected_year} Spring Animes";
				}
				break;
			case "SUMMER":
				if (summerAnimes != null)
				{
					currentlySelectedAnimes = summerAnimes;
					info_str = $"{selected_year} Summer Animes";
				}
				break;
			case "FALL":
				if (fallAnimes != null)
				{
					currentlySelectedAnimes = fallAnimes;
					info_str = $"{selected_year} Fall Animes";
				}
				break;
			default:
				break;
		}
	}


	protected async Task onChangedYear()
	{
		await queryAnimesByYear(selected_year);
		StateHasChanged();
	}


	protected void NavigateTo(int mal_id)
	{
		navManager.NavigateTo($"/anime/{mal_id}");
	}

}