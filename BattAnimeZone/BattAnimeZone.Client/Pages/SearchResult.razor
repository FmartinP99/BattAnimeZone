@inject NavigationManager navManager
@using BattAnimeZone.Shared.Models.AnimeDTOs
@using BattAnimeZone.Client.Components
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@page "/search/"
@page "/search/{name}"
<link rel="stylesheet" href="/SearchResult.css" />

<PageTitle>Search result for @name</PageTitle>

<SearchBar></SearchBar>

@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}
else{
    @if (this.similar_animes != null){
        @if(this.similar_animes.Count == 0)
        {
            <h1>There's no animes with the name: @name</h1>
                }else{

                <div class="display-div">
                @foreach (AnimeSearchResultDTO similar_anime in this.similar_animes)
                {
    
                <div @onclick=@(() => NavigateTo(similar_anime.Mal_id)) class="animeRow">
                        <RadzenColumn Style="min-width:100px; max-width:100px; display:inline-block;">
                            <RadzenImage Style="max-width:100px; max-height:100px;" Path="@similar_anime.ImageLargeWebpUrl"></RadzenImage>
                    </RadzenColumn>

                        <div class="attributeTitleDiv">
                            Title: <br> @similar_anime.Title
                        </div>

                        <div class="attributeTitleDiv">
                    English Title: <br> @similar_anime.TitleEnglish
                        </div>

                        <div class="attributeTitleDiv">
                            Japanese Title: <br> @similar_anime.TitleJapanese
                        </div>

                        <div class="attributeDiv">
                            Type: <br> @similar_anime.MediaType
                         </div>

                        <div class="attributeDiv">
                    Episodes: <br> @similar_anime.Episodes
                          </div>

                        <div class="attributeDiv">
                    Score: <br> @similar_anime.Score
                        </div>

                        <div class="attributeDiv">
                    Year: <br> @similar_anime.Year
                        </div>

                        <div class="attributeDiv">
                            Status: <br> @similar_anime.Status
                        </div>

                </div>


            }
           </div>
        }
    }
    else if (this.similar_animes == null || this.name == "" || this.name == null)
    {
        <h1 style="margin-top:50px">You did not search for anything!</h1>
    }

}



@code {

    HttpClient httpClient;

    bool loaded = false;
    [Parameter]
    public string name { get; set; } = "";
    List<AnimeSearchResultDTO>? similar_animes;
    int similar_anime_number = 20;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
            loaded = true;
            await GetSimilarAnimes();
            StateHasChanged();
        }
    }

    protected async Task GetSimilarAnimes()
    {
        if (string.IsNullOrEmpty(name))
            return;
        try
        {
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetSimilarAnimesForSearchResult?similar_number={similar_anime_number}&searched_term={name}");

            if (response.IsSuccessStatusCode)
            {
                similar_animes = await response.Content.ReadFromJsonAsync<List<AnimeSearchResultDTO>>();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
            }
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}"); ;
        }
    }


    protected void NavigateTo(int mal_id)
    {

        navManager.NavigateTo($"/anime/{mal_id}");
    }

    protected void NavigateToIndex()
    {
        navManager.NavigateTo("./");
    }

}
