@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@using BattAnimeZone.Client.Components
@using BattAnimeZone.Shared.Models.AnimeDTOs
@using BattAnimeZone.Shared.Models.User
@rendermode InteractiveWebAssembly
@page "/Profile/{UserName}"
<link rel="stylesheet" href="/ProfilePage.css?version=0.2" />

<PageTitle>@UserName's profile</PageTitle>


@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}else{


    <RadzenRow id="mainContainerRow">


        <RadzenColumn id="outerLeftColumn">

        <div id="UserNameDiv">
            <h2 id="userName">@UserName's profile</h2>
            <h5 id="memberSince">@regesteredAt</h5>
        </div>

        <div id="animeCountContainerDiv">

                <div id="completedDiv" class="textContainerDiv">
                    <p class="centered-text">Completed</p>

                    <p class="centered-text">
                        ( @(OwnAnimes.ContainsKey("completed") ? @OwnAnimes["completed"].Count() : 0) )
                    </p>
                </div>


                <div id="watchingDiv" class="textContainerDiv">
                    <p class="centered-text">Watching</p>

                    <p class="centered-text">
                        ( @(OwnAnimes.ContainsKey("watching") ? @OwnAnimes["watching"].Count() : 0) )
                    </p>
                </div>



                <div id="onholdDiv" class="textContainerDiv">
                    <p class="centered-text">On hold</p>

                    <p class="centered-text">
                        ( @(OwnAnimes.ContainsKey("on hold") ? @OwnAnimes["on hold"].Count() : 0) )
                    </p>
                </div>




                <div id="plannedDiv" class="textContainerDiv">
                    <p class="centered-text">Planned</p>

                    <p class="centered-text">
                        ( @(OwnAnimes.ContainsKey("planned") ? @OwnAnimes["planned"].Count() : 0) )
                    </p>
                </div>




                <div id="droppedDiv" class="textContainerDiv">
                    <p class="centered-text">Dropped</p>

                    <p class="centered-text">
                        ( @(OwnAnimes.ContainsKey("dropped") ? @OwnAnimes["dropped"].Count() : 0) )
                    </p>
                </div>




                <div id="favoritesDiv" class="textContainerDiv">
                    <p class="centered-text">Favorites</p>

                    <p class="centered-text">
                        ( @( OwnAnimes.ContainsKey("favorites") ? @OwnAnimes["favorites"].Count() : 0 ) )
                    </p>
                </div>

            </div>

            <hr />

            <RadzenChart ColorScheme="ColorScheme.Palette" >
                <RadzenColumnSeries Fills=@(new [] { "#1E8B22", "#6495ED", "#696969", "#663399", "#8B0000", "#FFE200" }) Data="@animeChart" CategoryProperty="Status"  LineType="LineType.Dashed" ValueProperty="Count">
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenColumnSeries>
                <RadzenColumnOptions Radius="5" />
                <RadzenValueAxis>
                    <RadzenGridLines Visible="false" />
                    <RadzenAxisTitle Text="Count" />
                </RadzenValueAxis>
                <RadzenLegend Visible="false"></RadzenLegend>
            </RadzenChart>


        </RadzenColumn>

         <RadzenColumn id="outerRightColumn">
            <RadzenTabs Change=@OnChange TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
                <Tabs>
                    @foreach(string state in PossibleStates)
                    {
                        <RadzenTabsItem Text="@state" class="tabsItemClass">
                            <RadzenDataList PageSize="10" WrapItems="true" AllowPaging="true" Data="@OwnAnimes[state]" TItem="AnimeProfilePageDTO">
                                <Template Context="anime">
                                    <RadzenRow class="animeRow" @onclick=@(() => NavigateTo(anime.Mal_id))>
                                        <RadzenColumn class="imageCol">
                                            <RadzenImage class="imageDiv" Path="@anime.ImageLargeWebpUrl"></RadzenImage>
                                        </RadzenColumn>

                                        <RadzenColumn class="notImageCol">

                                            <RadzenRow class="animeCardUpperRow">
                                               
                                                    <div class="titleCol">
                                                         @anime.Title
                                                    </div>

                                                    <div class="dateCol">
                                                    Added to list: <br>  
                                                    @if (anime.Date != null)
                                                    {
                                                        @string.Join(" ", anime.Date.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Take(3))
                                                    }
                                                    </div>
                                              
                                            </RadzenRow>

                                            <RadzenRow class="animeCardLowerRow">

                                                <div class="attributesCol">
                                                    Type: <br> @anime.MediaType
                                                </div>

                                                <div class="attributesCol">
                                                    Episodes: <br> @anime.Episodes
                                                </div>

                                                <div class="attributesCol">
                                                    Score: <br> @anime.Score
                                                </div>

                                                <div class="attributesCol">
                                                    Popularity: <br> @anime.Popularity
                                                </div>

                                                <div Sclass="attributesCol">
                                                    Year: <br> @anime.Year
                                                </div>

                                                <div class="attributesCol">
                                                    Status: <br> @anime.Status
                                                </div>

                                                <div class="attributesCol">
                                                    Rated at: <br> @anime.UserRating/10
                                                </div>

                                                <div class="attributesCol">
                                                    Favorite: <br> @FavoriteToString(anime.UserFavorite)
                                                </div>

                                            </RadzenRow>

                                      
                                        </RadzenColumn>


                                    </RadzenRow>
                                </Template>
                            </RadzenDataList>
                        </RadzenTabsItem>
                    }

                </Tabs>
            </RadzenTabs>
        </RadzenColumn>


    </RadzenRow>




    @code {


    class DataItem
    {
        public string Status { get; set; }
        public double? Count { get; set; }
    }
    DataItem[] animeChart = new DataItem[6];

    bool loaded = false;

    [Parameter]
    public string? UserName { get; set; }

    Dictionary<string, List<AnimeProfilePageDTO>?> OwnAnimes = new Dictionary<string, List<AnimeProfilePageDTO>?>();
    string regesteredAt = "";

    string selected_tab = "Finished";
    HttpClient httpClient;

    List<string> PossibleStates = new List<string>(){ "completed", "watching", "on hold", "planned", "dropped", "favorites" };




    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();

    }

    protected override async Task OnParametersSetAsync()
    {

        try
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
            var response = await httpClient.GetAsync($"{navManager.BaseUri}api/AccountController/GetProfile/{UserName}");
            if (response.IsSuccessStatusCode)
            {
                ProfilePageDTO? profilePageDTO = await response.Content.ReadFromJsonAsync<ProfilePageDTO?>();
                if (profilePageDTO == null) return;

                List<AnimeProfilePageDTO> queried_animes = profilePageDTO.Animes;

                string dateTimeString = profilePageDTO.RegisteredAt == null ? "" : profilePageDTO.RegisteredAt;
                string[] parts = dateTimeString.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                string dateOnly = string.Join(" ", parts.Take(3));


                regesteredAt = profilePageDTO.RegisteredAt == null ? "" : $"Member since: {dateOnly}";

                foreach (var state in PossibleStates)
                {
                    OwnAnimes[state] = new List<AnimeProfilePageDTO>();
                }

                if (queried_animes != null)
                {
                    foreach (var anime in queried_animes)
                    {

                        if (OwnAnimes[anime.UserStatus] != null)
                            OwnAnimes[anime.UserStatus].Add(anime);
                        else
                            OwnAnimes[anime.UserStatus] = new List<AnimeProfilePageDTO> { anime };

                        if (OwnAnimes["favorites"] != null && anime.UserFavorite == true)
                            OwnAnimes["favorites"].Add(anime);
                        else if (OwnAnimes["favorites"] == null && anime.UserFavorite == true)
                        {
                            OwnAnimes["favorites"] = new List<AnimeProfilePageDTO> { anime };
                        }
                    }

                    animeChart[0] = new DataItem { Status = "Completed", Count = OwnAnimes["completed"]?.Count() ?? 0 };
                    animeChart[1] = new DataItem { Status = "Watching", Count = OwnAnimes["watching"]?.Count() ?? 0 };
                    animeChart[2] = new DataItem { Status = "On hold", Count = OwnAnimes["on hold"]?.Count() ?? 0 };
                    animeChart[3] = new DataItem { Status = "Planned", Count = OwnAnimes["planned"]?.Count() ?? 0 };
                    animeChart[4] = new DataItem { Status = "Dropped", Count = OwnAnimes["dropped"]?.Count() ?? 0 };
                    animeChart[5] = new DataItem { Status = "Favorites", Count = OwnAnimes["favorites"]?.Count() ?? 0 };

                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");

            }
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loaded = true;
          
        }
    }

    string FavoriteToString(bool favorite)
    {
        return favorite == true ? "Yes" : "No";
    }

    void OnChange(int index)
    {
        Console.WriteLine($"selected {index}");
    }

    protected void NavigateTo(int mal_id)
    {

        navManager.NavigateTo($"/anime/{mal_id}");
    }

}

}
