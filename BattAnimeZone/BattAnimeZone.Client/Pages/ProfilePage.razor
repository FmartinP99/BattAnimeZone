@inject NavigationManager navManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@using BattAnimeZone.Client.Components
@using BattAnimeZone.Shared.Models.AnimeDTOs
@rendermode InteractiveWebAssembly
@page "/Profile/{UserName}"

@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}
else
{
    
}

@code {

    bool loaded = false;

    [Parameter]
    public string? UserName { get; set; }

    Dictionary<string, List<AnimeProfilePageDTO>?> OwnAnimes = new Dictionary<string, List<AnimeProfilePageDTO>?>();

    HttpClient httpClient;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loaded = true;
            try
            {
                httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/AccountController/GetProfile/{UserName}");
                if (response.IsSuccessStatusCode)
                {
                    List<AnimeProfilePageDTO>? queried_animes = await response.Content.ReadFromJsonAsync<List<AnimeProfilePageDTO>?>();


                    if (queried_animes != null)
                    {
                        foreach (var anime in queried_animes)
                        {
                            if (OwnAnimes.ContainsKey(anime.UserStatus) && OwnAnimes[anime.UserStatus] != null)
                            {
                                OwnAnimes[anime.UserStatus].Add(anime);
                            }
                            else
                            {
                                OwnAnimes[anime.UserStatus] = new List<AnimeProfilePageDTO> { anime };
                            }
                        }

                        foreach (var kvp in OwnAnimes)
                        {
                            Console.WriteLine(kvp.Key);
                            foreach (var v in kvp.Value)
                            {
                                Console.WriteLine($"\t {v.Title} - {v.Status} - {v.UserRating}");
                            }
                        }

                    }

                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {

                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");

                }

            }
            catch (Exception e)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

}
