@inject NavigationManager navManager
@using BattAnimeZone.Client.Components
@using BattAnimeZone.Shared.Models.AnimeDTOs
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly
@page "/anime/{mal_id:int}"
<link rel="stylesheet" href="/AnimePage.css?version=0.1" />

@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}
else{
    @if (currentAnime != null && currentAnime.Mal_id == -1) NavigateToIndex();
    <PageTitle>AnimeView</PageTitle>
    <SearchBar></SearchBar>

    @if (currentAnime != null){
    <div Style="padding-left: 20px; padding-right: 20px;">

        <div class="defaultTitleDiv">@currentAnime.Title</div>
        <hr />
        <RadzenButton id="relation-button" Click="NavigateToRelationsPage" Text="RELATED ANIMES" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);"></RadzenButton>
        <RadzenButton id="relation-button" Click="NavigateToMALAnime" Text="MAL LINK" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);"></RadzenButton>
 
        <br />
   
        <RadzenRow Style="height:500px; flex:auto; margin-bottom:20px; justify-content: space-between;">
       
            <div class="imageDiv">
                <img src="@currentAnime.ImageLargeWebpUrl" class="img-fluid" alt="Anime image is missing!">
            </div>

                <div class="attributesDiv">
                @if (currentAnime.TitleEnglish.Length > 0 || currentAnime.TitleJapanese.Length > 0)
                {
                    <div class="rowDiv">
                        <span class="titleSpan">Alternative Name(s):</span><br />
                        @if (currentAnime.TitleEnglish.Length > 0)
                        {
                            <span class="titleLanguage">ENG: </span>
                            @currentAnime.TitleEnglish
                            <br />
                        }
                        @if (currentAnime.TitleJapanese.Length > 0)
                        {
                            <span class="titleLanguage">JP: </span>
                            @currentAnime.TitleJapanese
                        }
                    </div>
                    }
          

                    <div class="rowDiv"><span class="titleSpan">Episodes: </span>@currentAnime.Episodes</div>
                    <div class="rowDiv"><span class="titleSpan">Type: </span>@currentAnime.MediaType</div>

                    <div class="rowDiv"><span class="titleSpan">Airing: </span>@currentAnime.Status</div>
                    <div class="rowDiv"><span class="titleSpan">Season: </span>@currentAnime.Season</div>
                    <div class="rowDiv"><span class="titleSpan">Aired: </span>@currentAnime.AiredString</div>

                    <div class="rowDiv"><span class="titleSpan">Rank: </span>@currentAnime.Rank</div>
                    <div class="rowDiv"><span class="titleSpan">Score: </span>@currentAnime.Score</div>
                    <div class="rowDiv"><span class="titleSpan">Popularity: </span>@currentAnime.Popularity</div>

                    @if (currentAnime.Genres != null)
                    {
                        <div class="rowDiv">
                            <span class="titleSpan">Genres: </span>

                            @foreach (var genre in currentAnime.Genres)
                            {
                                <span class="prodentSpan" @onclick="(args) => NavigateToGenre(genre.Mal_id)">@genre.Name, </span>
                            }
                        </div>
                    }

                    @if (currentAnime.Themes != null)
                    {
                        <div class="rowDiv">
                            <span class="titleSpan">Themes: </span>

                            @foreach (var theme in currentAnime.Themes)
                            {
                                <span class="prodentSpan" @onclick="(args) => NavigateToGenre(theme.Mal_id)">@theme.Name, </span>
                            }
                        </div>
                    }


                @if (currentAnime.Producers != null){
                        <div class="rowDiv">
                            <span class="titleSpan">Producers: </span>
                         
                                    @foreach (var prod in currentAnime.Producers)
                                    {
                                    <span class="prodentSpan" @onclick="(args) => NavigateToProdEnt(prod.Mal_id)">@prod.Name, </span>
                            }
                        </div>
                    }

                    @if (currentAnime.Licensors != null)
                    {
                        <div  class="rowDiv">
                            <span class="titleSpan">Licensors: </span>
                      
                                @foreach (var lic in currentAnime.Licensors)
                                {
                                <span class="prodentSpan" @onclick="(args) => NavigateToProdEnt(lic.Mal_id)">@lic.Name, </span>
                        }</div>
                 }

                    @if (currentAnime.Studios != null)
                    {

                        <div class="rowDiv">
                                <span class="titleSpan">Studios: </span>
                 
                                @foreach (var studio in currentAnime.Studios)
                                    {
                                    <span class="prodentSpan" @onclick="(args) => NavigateToProdEnt(studio.Mal_id)">@studio.Name, </span>
                            } </div>
                  }

                </div>


            @if(currentAnime.Synopsis.Length > 0){
            <div class="synopsisHeaderDiv">
                    Synopsis:
                    <div class="synopsisDiv">
                        @currentAnime.Synopsis
                    </div>
                </div>
            }

               @if(currentAnime.Background.Length > 0){
            <div class="synopsisHeaderDiv">
                Background:
                <div class="synopsisDiv">
                    @currentAnime.Background
                </div>
            </div>
               }


        </RadzenRow>
        <hr />
        @if (currentAnime.Streamings != null)
        {
            <div class="streamingsDiv">
                <div class="streamingTitleDiv">
                <span class="streamingTitleSpan">Streamings: </span>
                    </div>
                        @foreach (var streaming in currentAnime.Streamings)
                        {
                        <div class="streamingsInnerDiv">
                            <RadzenButton Click="() => NavigateToStreamingSite(streaming.Url)" Text=@streaming.Name Style=@($"width:100%; {GetButtonStyle(streaming.Name)}")></RadzenButton>
                        </div>
                        }
                </div>
        }

    </div>
    }
}
@code{
    bool loaded = false;
    [Parameter]
    public int mal_id { get; set; }
    AnimePageDTO? currentAnime;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loaded = true;

            try
            {
                //var response = await httpClient.GetAsync($"{navManager.BaseUri}api/AnimeService/GetAnime/{mal_id}");
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetAnime/{mal_id}");

                if (response.IsSuccessStatusCode)
                {
                    currentAnime = await response.Content.ReadFromJsonAsync<AnimePageDTO>();
                    //make the first character of the Season  uppercase
                    if (currentAnime.Season.Length > 0)
                        currentAnime.Season = char.ToUpper(currentAnime.Season[0]) + currentAnime.Season.Substring(1);
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    return;
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                    return;
                }
                StateHasChanged();
            }catch(Exception e)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
                return;
            }
        }
    }

    string GetButtonStyle(string streamingName)
    {
        switch (streamingName.ToLower())
        {
            case "netflix":
                return "background-color: #E50914;";
            case "aniplus tv":
                return "background-color: #FFA500; color:black"; 
            case "bahamut anime crazy":
                return "background-color: #59d3eb; color:#151515"; 
            case "bilibili global":
                return "background-color: #59d3eb; color:white";
            case "catchplay":
                return "background-color: #f26f21; color:white";
            case "crunchyroll":
                return "background-color: #FF4500; color:black";
            case "ani-one asia":
                return "background-color: #E50914;";
            case "iqiyi":
                return "background-color: rgb(0,194,52);";
            case "muse asia":
                return "background-color: #E50914;";
            case "mewatch":
                return "background-color: white; color:black";
            case "funimation":
                return "background-color: #231F20; color:white";
            default:
                return "background-color: #CCCCCC; color:black;"; 
        }
    }


    protected void NavigateToIndex()
    {
        navManager.NavigateTo("./");
    }

    protected void NavigateToProdEnt(int prodent_id)
    {
        navManager.NavigateTo($"./studio/{prodent_id}");
    }

    protected void NavigateToMALAnime(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            JSRuntime.InvokeVoidAsync("open", $"https://myanimelist.net/anime/{mal_id}", "_blank");
        }
    }


    protected void NavigateToRelationsPage()
    {
        navManager.NavigateTo($"/anime/{mal_id}/relations", forceLoad: true);
    }

    protected void NavigateToGenre(int genre_id)
    {
        navManager.NavigateTo($"/genrelist/{genre_id}", forceLoad: true);
    }

    protected void NavigateToStreamingSite(string url)
    {
        JSRuntime.InvokeVoidAsync("open", $"{url}", "_blank");
    }
}