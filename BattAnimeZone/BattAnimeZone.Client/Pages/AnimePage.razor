@inject NavigationManager navManager
@using BattAnimeZone.Client.Components
@using BattAnimeZone.Shared.Models.AnimeDTOs
@using BattAnimeZone.Shared.Models.User.BrowserStorageModels
@using BattAnimeZone.Shared.Policies
@using BattAnimeZone.Client.Authentication
@using BattAnimeZone.Client.Services
@using BlazorBootstrap;
@using System.Net.Http.Headers;
@inject StorageService storageService
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authStateProvider
@rendermode InteractiveWebAssembly
@page "/anime/{mal_id:int}"
<link rel="stylesheet" href="/AnimePage.css?version=0.1" />


<PageTitle>Anime View</PageTitle>

@if (!loaded)
{
    <LoadingComponent></LoadingComponent>
}
else{
    @if (currentAnime != null && currentAnime.Mal_id == -1) NavigateToIndex();


    <PageTitle>@(currentAnime?.Title ?? currentAnime?.TitleEnglish ?? currentAnime?.TitleJapanese ?? "Anime View")</PageTitle>
    <SearchBar></SearchBar>

    @if (currentAnime != null){
    <div Style="padding-left: 20px; padding-right: 20px;">
        
        <div  class="defaultTitleDiv">@currentAnime.Title</div>
        <hr />
        <div class="headerDiv">
            <RadzenButton id="relation-button" Click="NavigateToRelationsPage" Text="RELATED ANIMES" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);"></RadzenButton>
            <RadzenButton id="relation-button" Click="NavigateToMALAnime" Text="MAL LINK" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);"></RadzenButton>
            <AuthorizeView>
                <Authorized>
             <Button id="modalButton" Color="ButtonColor.Primary" @onclick="OnShowModalClick" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);">@modalDisplayText</Button>
                    </Authorized>
                <NotAuthorized>
                        <Button id="modalNotAuthButton" Color="ButtonColor.Primary">Log in to rate this anime!</Button>
                    </NotAuthorized>
                </AuthorizeView>
        </div>
        
        <br />
        
        <RadzenRow class="firstRow">
       
            <div class="imageDiv">
                <img src="@currentAnime.ImageLargeWebpUrl" class="img-fluid" alt="Anime image is missing!">
            </div>

                <div class="attributesDiv">
                @if (currentAnime.TitleEnglish.Length > 0 || currentAnime.TitleJapanese.Length > 0)
                {
                    <div class="rowDiv">
                        <span class="titleSpan">Alternative Name(s):</span><br />
                        @if (currentAnime.TitleEnglish.Length > 0)
                        {
                            <span class="titleLanguage">ENG: </span>
                            @currentAnime.TitleEnglish
                            <br />
                        }
                        @if (currentAnime.TitleJapanese.Length > 0)
                        {
                            <span class="titleLanguage">JP: </span>
                            @currentAnime.TitleJapanese
                        }
                    </div>
                    }
          

                    <div class="rowDiv"><span class="titleSpan">Episodes: </span>@currentAnime.Episodes</div>
                    <div class="rowDiv"><span class="titleSpan">Duration: </span>@currentAnime.Duration</div>
                    <div class="rowDiv"><span class="titleSpan">Type: </span>@currentAnime.MediaType</div>

                    <div class="rowDiv"><span class="titleSpan">Airing: </span>@currentAnime.Status</div>
                    <div class="rowDiv"><span class="titleSpan">Season: </span>@currentAnime.Season</div>
                    <div class="rowDiv"><span class="titleSpan">Aired: </span>@currentAnime.AiredString</div>

                    <div class="rowDiv"><span class="titleSpan">Rank: </span>@currentAnime.Rank</div>
                    <div class="rowDiv"><span class="titleSpan">Score: </span>@currentAnime.Score</div>
                    <div class="rowDiv"><span class="titleSpan">Popularity: </span>@currentAnime.Popularity</div>

                    @if (currentAnime.Genres != null && currentAnime.Genres.Count > 0)
                    {
                        <div class="rowDiv">
                            <span class="titleSpan">Genres: </span>

                            @foreach (var genre in currentAnime.Genres)
                            {
                                <span class="prodentSpan" @onclick="(args) => NavigateToGenre(genre.Mal_id)">@genre.Name, </span>
                            }
                        </div>
                    }

                    @if (currentAnime.Themes != null && currentAnime.Themes.Count > 0)
                    {
                        <div class="rowDiv">
                            <span class="titleSpan">Themes: </span>

                            @foreach (var theme in currentAnime.Themes)
                            {
                                <span class="prodentSpan" @onclick="(args) => NavigateToGenre(theme.Mal_id)">@theme.Name, </span>
                            }
                        </div>
                    }


                    @if (currentAnime.Producers != null && currentAnime.Producers.Count > 0)
                    {
                        <div class="rowDiv">
                            <span class="titleSpan">Producers: </span>
                         
                                    @foreach (var prod in currentAnime.Producers)
                                    {
                                    <span class="prodentSpan" @onclick="(args) => NavigateToProdEnt(prod.Mal_id)">@prod.Name, </span>
                            }
                        </div>
                    }

                    @if (currentAnime.Licensors != null && currentAnime.Licensors.Count > 0)
                    {
                        <div  class="rowDiv">
                            <span class="titleSpan">Licensors: </span>
                      
                                @foreach (var lic in currentAnime.Licensors)
                                {
                                <span class="prodentSpan" @onclick="(args) => NavigateToProdEnt(lic.Mal_id)">@lic.Name, </span>
                        }</div>
                 }

                    @if (currentAnime.Studios != null && currentAnime.Studios.Count > 0)
                    {

                        <div class="rowDiv">
                                <span class="titleSpan">Studios: </span>
                 
                                @foreach (var studio in currentAnime.Studios)
                                    {
                                    <span class="prodentSpan" @onclick="(args) => NavigateToProdEnt(studio.Mal_id)">@studio.Name, </span>
                            } </div>
                  }

                </div>


            @if(currentAnime.Synopsis.Length > 0){
            <div class="synopsisHeaderDiv">
                    Synopsis:
                    <div class="synopsisDiv">
                        @currentAnime.Synopsis
                    </div>
                </div>
            }

               @if(currentAnime.Background.Length > 0){
            <div class="synopsisHeaderDiv">
                Background:
                <div class="synopsisDiv">
                    @currentAnime.Background
                </div>
            </div>
               }


        </RadzenRow>
        <hr />

        <div class="secondRow">
       
            <div class="streamingsDiv">
                <div class="streamingTitleDiv">
                <span class="streamingTitleSpan">Streamings: </span>
                    </div>
                    @if (currentAnime.Streamings != null)
                    {
                        @foreach (var streaming in currentAnime.Streamings)
                        {
                        <div class="streamingsInnerDiv">
                            <RadzenButton Click="() => NavigateToStreamingSite(streaming.Url)" Text=@streaming.Name Style=@($"width:100%; {GetButtonStyle(streaming.Name)}")></RadzenButton>
                        </div>
                        }
                    }
                </div>
        </div>

    </div>

    }





    <Modal @ref="modal"  Class="customModalCssClass" IsVerticallyCentered="true" 
        FooterCssClass="customModalFooterCssClass"
           BodyCssClass="customModalBodyCssClass"
           HeaderCssClass="customModalHeaderCssClass"
              CloseIconColor=IconColor.White>
        
        <BodyTemplate >
            <div class=ratingDiv>
            <RadzenLabel Text="Rate:" class="rateComponentText" Style="vertical-align: middle;" />
                <RadzenDropDown @ref=statusDropDown class="rzdropdownRating" @bind-Value=@rating Data=possibleRatings Style="width: 100%; max-width: 160px;" Name="DropDownTextValueProperties" />
            </div>
             <div class=statusDiv>
            <RadzenLabel Text="Status:" class="statusComponentText" Style="vertical-align: middle;" />
                <RadzenDropDown class="rzdropdownStatus" @bind-Value=@status Data=@GetPossibleStatuses() Style="width: 100%; max-width: 160px;" Name="DropDownTextValueProperties" />
                </div>
            <div class=favoriteDiv>
            <RadzenLabel Text="Favorite" Component="CheckBoxFavorite" Style="vertical-align: middle;" />
                <RadzenCheckBox @ref=favoriteCheckBox @bind-Value=@favorite Name="CheckBoxFavorite" Style="vertical-align:middle" />
            </div>
        </BodyTemplate>

        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
            <Button Color="ButtonColor.Primary" @ref="modalSaveButton" @onclick="OnModalSaveClick" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);">@saveChangesString</Button>
        </FooterTemplate>
</Modal>
}
@code{
    bool loaded = false;
    [Parameter]
    public int mal_id { get; set; }
    AnimePageDTO? currentAnime;

    private string modalDisplayText = "I haven't rated yet!";
    private string rating = "Not rated";
    private string[] possibleRatings = new string[11] { "Not rated", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };

    private string status = "Nothing";
    private string[] possibleStatuses = new string[6] { "Nothing", "Completed", "Watching", "Planned", "On hold", "Dropped" };
    private string[] possibleStatusesNotFinished = new string[5] { "Nothing", "Watching", "Planned", "On hold", "Dropped" };
    private string[] possibleStatusesNotYetAired = new string[2] { "Nothing",  "Planned"};

    RadzenDropDown<string> statusDropDown = default!;
    RadzenCheckBox<bool>  favoriteCheckBox = default!;

    private bool favorite = false;

    string saveChangesString = "Save changes";

    HttpClient httpClient;

    CustomAuthenticationStateProvider customAuthStateProvider;

    protected override async Task OnInitializedAsync()
    {
        customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await ChangeModalDisplayText();
        await base.OnInitializedAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");

            loaded = true;

            try
            {

                //var response = await httpClient.GetAsync($"{navManager.BaseUri}api/AnimeService/GetAnime/{mal_id}");
                var response = await httpClient.GetAsync($"{navManager.BaseUri}api/DbController/GetAnime/{mal_id}");

                if (response.IsSuccessStatusCode)
                {
                    currentAnime = await response.Content.ReadFromJsonAsync<AnimePageDTO>();
                    //make the first character of the Season  uppercase
                    if (currentAnime.Season.Length > 0)
                        currentAnime.Season = char.ToUpper(currentAnime.Season[0]) + currentAnime.Season.Substring(1);

                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    return;
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"{response.StatusCode}\n {response.ReasonPhrase}");
                    return;
                }
                StateHasChanged();
            }catch(Exception e)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"{e.Message}");
                return;
            }
        }
    }


    private async Task ChangeModalDisplayText()
    {

        InteractedAnime? curr_intr_anim = await storageService.GetInteractedAnimeByIdLocalStorage(mal_id);
        if (curr_intr_anim == null || string.IsNullOrEmpty(curr_intr_anim.Status))
        { 
            modalDisplayText = "I haven't rated it yet!";
            return;
        }
        string new_text = char.ToUpper(curr_intr_anim.Status[0]) + curr_intr_anim.Status.Substring(1) + " " + (curr_intr_anim.Rating != 0 ? $"({curr_intr_anim.Rating}/10)" : "");
        modalDisplayText = new_text;
        rating = curr_intr_anim.Rating.ToString();
        status = curr_intr_anim.Status;
        favorite = curr_intr_anim.Favorite;

    } 

    string GetButtonStyle(string streamingName)
    {
        switch (streamingName.ToLower())
        {
            case "netflix":
                return "background-color: #E50914;";
            case "aniplus tv":
                return "background-color: #FFA500; color:black"; 
            case "aniplus asia":
                return "background-color: #FFA500; color:black";
            case "bahamut anime crazy":
                return "background-color: #59d3eb; color:#151515"; 
            case "bilibili":
                return "background-color: #59d3eb; color:white;";
            case "bilibili global":
                return "background-color: #59d3eb; color:white;";
            case "catchplay":
                return "background-color: #f26f21; color:white;";
            case "crunchyroll":
                return "background-color: #FF4500; color:black;";
            case "ani-one asia":
                return "background-color: #E50914;";
            case "iqiyi":
                return "background-color: rgb(0,194,52);";
            case "muse asia":
                return "background-color: #E50914;";
            case "mewatch":
                return "background-color: white; color:black;";
            case "funimation":
                return "background-color: rgb(58,0,165); color:white;";
            case "sushiroll":
                return "background-color: #f6cb52; color: black;";
            case "laftel":
                return "background-color: #8168ff; color: black;";
            case "wakanim":
                return "background-color: orange; color: #303030;";
            case "genflix":
                return "background-color: #f49832; color: black;";
            case "trueid":
                return "background-color: red; color: #303030;";
            case "hidive":
                return "background-color: #00AEF0; color:black";
            case "anime digital network":
                return "background-color: #00AEF0; color:white";
            case "akiba pass tv":
                return "background-color: #EB2626; color:black";
            default:
                return "background-color: #CCCCCC; color:black;"; 
        }
    }



    private Button modalSaveButton = default!;

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {

        await modal.ShowAsync();
        SetRatingComponentsStatuses();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task OnModalSaveClick()
    {

        modalSaveButton.ShowLoading("Loading...");

        if (currentAnime.Status == "Currently Airing" && !possibleStatusesNotFinished.Contains(this.status))
        {
            modalSaveButton.HideLoading();
            return;
        }


        if(currentAnime.Status == "Not yet aired" && (!possibleStatusesNotYetAired.Contains(this.status)  || this.rating != "Not rated"))
        {
            modalSaveButton.HideLoading();
            return;
        }





        var username = await storageService.GetUsernameLocalStorage();
        if (username == null) return;


        bool successConversion = int.TryParse(this.rating, out int finalrating);
        if (!successConversion) finalrating = 0;

        string? finalStatus = this.status == "Nothing" ? null : this.status.ToLower();

        var token = await storageService.GetTokenLocalStorage();

        AnimeActionTransfer aat = new AnimeActionTransfer
            {
                UserName = username,
                AnimeId = currentAnime.Mal_id,
                Rating = finalrating,
                Status = finalStatus,
                Favorite = this.favorite
            };


        try
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await httpClient.PostAsJsonAsync<AnimeActionTransfer>($"{navManager.BaseUri}api/AccountController/AnimeRating",
            aat
            );
            if (response.IsSuccessStatusCode)
            {
                modalSaveButton.HideLoading();
                await modal.HideAsync();
                StateHasChanged();

                InteractedAnime intanime = new InteractedAnime
                    {
                        Rating = finalrating,
                        Status = finalStatus,
                        Favorite = this.favorite
                    };
                await storageService.InsertOrUpdateInteractiveAnimeLocalStorage(currentAnime.Mal_id, intanime);
                await ChangeModalDisplayText();
            }
            else
            {
                modalSaveButton.HideLoading();
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"{ex.Message}");
            modalSaveButton.HideLoading();
            return;
        }

    }

    string[] GetPossibleStatuses()
    {
        if(this.currentAnime.Status == "Finished Airing")
        {
            return possibleStatuses;
        }
        else if(this.currentAnime.Status == "Not yet aired")
        {
            return possibleStatusesNotYetAired;
        }
        return possibleStatusesNotFinished;
    }

    void SetRatingComponentsStatuses()
    {
        if (currentAnime.Status == "Not yet aired") 
        {
            statusDropDown.Disabled = true;
            favoriteCheckBox.Disabled = true;
        }
    }

    protected void NavigateToIndex()
    {
        navManager.NavigateTo("./");
    }

    protected void NavigateToProdEnt(int prodent_id)
    {
        navManager.NavigateTo($"./studio/{prodent_id}");
    }

    protected void NavigateToMALAnime(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            JSRuntime.InvokeVoidAsync("open", $"https://myanimelist.net/anime/{mal_id}", "_blank");
        }
    }


    protected void NavigateToRelationsPage()
    {
        navManager.NavigateTo($"/anime/{mal_id}/relations");
    }

    protected void NavigateToGenre(int genre_id)
    {
        navManager.NavigateTo($"/genrelist/{genre_id}");
    }

    protected void NavigateToStreamingSite(string url)
    {
        JSRuntime.InvokeVoidAsync("open", $"{url}", "_blank");
    }

}